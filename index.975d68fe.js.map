{"mappings":"ACEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAErC,SAAS,EAAqB,CAAO,EAC9B,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAQ,IAAI,CAAA,OAAA,QAAA,CAAA,GAAzB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA2B,CAA3B,IAAM,EAAN,EAAA,KAAA,CACG,EAAY,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAEzC,EAAI,YAAY,CAAC,EAAW,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAC7D,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAKP,CAEI,EAAM,KAAK,EACb,EAAqB,EAAM,KAAK,EAI3B,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADP,GAAI,EAAM,OAAO,CAAC,MAAM,CAAG,EAA3B,GAAA,CACE,IAAA,IAAK,EAAA,EAAe,EAAM,OAAO,CAAA,OAAA,QAAA,CAAA,GAA5B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAqB,E,C,C,M,E,CADlB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAKH,EAAM,KAAK,EACb,EAAqB,EAAM,KAAK","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nfunction cloneAndInsertColumn(section) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = section.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var cloneCell = row.cells[1].cloneNode(true);\n            row.insertBefore(cloneCell, row.cells[row.cells.length - 1]);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nif (table.tHead) cloneAndInsertColumn(table.tHead);\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\nif (table.tBodies.length > 0) try {\n    for(var _iterator = table.tBodies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var tbody = _step.value;\n        cloneAndInsertColumn(tbody);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nif (table.tFoot) cloneAndInsertColumn(table.tFoot);\n\n//# sourceMappingURL=index.975d68fe.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\nfunction cloneAndInsertColumn(section) {\n  for (const row of section.rows) {\n    const cloneCell = row.cells[1].cloneNode(true);\n\n    row.insertBefore(cloneCell, row.cells[row.cells.length - 1]);\n  }\n}\n\nif (table.tHead) {\n  cloneAndInsertColumn(table.tHead);\n}\n\nif (table.tBodies.length > 0) {\n  for (const tbody of table.tBodies) {\n    cloneAndInsertColumn(tbody);\n  }\n}\n\nif (table.tFoot) {\n  cloneAndInsertColumn(table.tFoot);\n}\n"],"names":["table","document","querySelector","cloneAndInsertColumn","section","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","rows","Symbol","iterator","next","done","row","value","cloneCell","cells","cloneNode","insertBefore","length","err","return","tHead","tBodies","tbody","tFoot"],"version":3,"file":"index.975d68fe.js.map"}